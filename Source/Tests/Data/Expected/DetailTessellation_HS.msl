#pragma clang diagnostic ignored "-Wmissing-prototypes"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_cbMain
{
    float4 tessellationFactor;
};

struct VS_OUTPUT_HS_INPUT
{
    float3 worldPos;
    float3 normal;
    float2 texCoord;
    float3 lightTS;
};

struct main0_out
{
    float3 out_var_LIGHTVECTORTS_0;
    float3 out_var_NORMAL_0;
    float3 out_var_LIGHTVECTORTS_1;
    float3 out_var_NORMAL_1;
    float2 out_var_TEXCOORD0_0;
    float3 out_var_LIGHTVECTORTS_2;
    float3 out_var_WORLDPOS_0;
    float3 out_var_NORMAL_2;
    float2 out_var_TEXCOORD0_1;
    float3 out_var_WORLDPOS_1;
    float2 out_var_TEXCOORD0_2;
    float3 out_var_WORLDPOS_2;
    float gl_TessLevelOuter[4];
    float gl_TessLevelInner[2];
};

struct main0_in
{
    float3 in_var_WORLDPOS_0;
    float3 in_var_WORLDPOS_1;
    float3 in_var_NORMAL_0;
    float3 in_var_WORLDPOS_2;
    float3 in_var_NORMAL_1;
    float2 in_var_TEXCOORD0_0;
    float3 in_var_NORMAL_2;
    float2 in_var_TEXCOORD0_1;
    float3 in_var_LIGHTVECTORTS_0;
    float2 in_var_TEXCOORD0_2;
    float3 in_var_LIGHTVECTORTS_1;
    float3 in_var_LIGHTVECTORTS_2;
};

// Implementation of an array copy function to cover GLSL's ability to copy an array via assignment.
template<typename T, uint N>
void spvArrayCopyFromStack1(thread T (&dst)[N], thread const T (&src)[N])
{
    for (uint i = 0; i < N; dst[i] = src[i], i++);
}

template<typename T, uint N>
void spvArrayCopyFromConstant1(thread T (&dst)[N], constant T (&src)[N])
{
    for (uint i = 0; i < N; dst[i] = src[i], i++);
}

unknown main0_out main0(main0_in in [[stage_in]], constant type_cbMain& cbMain [[buffer(0)]], unsupported-built-in-type gl_InvocationID [[unsupported-built-in]], unsupported-built-in-type gl_PrimitiveID [[unsupported-built-in]])
{
    main0_out out = {};
    float3 out_var_WORLDPOS[3] = {};
    float3 out_var_NORMAL[3] = {};
    float2 out_var_TEXCOORD0[3] = {};
    float3 out_var_LIGHTVECTORTS[3] = {};
    float3 in_var_WORLDPOS[] = {};
    float3 in_var_NORMAL[] = {};
    float2 in_var_TEXCOORD0[] = {};
    float3 in_var_LIGHTVECTORTS[] = {};
    in_var_WORLDPOS[0] = in.in_var_WORLDPOS_0;
    in_var_WORLDPOS[1] = in.in_var_WORLDPOS_1;
    in_var_WORLDPOS[2] = in.in_var_WORLDPOS_2;
    in_var_NORMAL[0] = in.in_var_NORMAL_0;
    in_var_NORMAL[1] = in.in_var_NORMAL_1;
    in_var_NORMAL[2] = in.in_var_NORMAL_2;
    in_var_TEXCOORD0[0] = in.in_var_TEXCOORD0_0;
    in_var_TEXCOORD0[1] = in.in_var_TEXCOORD0_1;
    in_var_TEXCOORD0[2] = in.in_var_TEXCOORD0_2;
    in_var_LIGHTVECTORTS[0] = in.in_var_LIGHTVECTORTS_0;
    in_var_LIGHTVECTORTS[1] = in.in_var_LIGHTVECTORTS_1;
    in_var_LIGHTVECTORTS[2] = in.in_var_LIGHTVECTORTS_2;
    VS_OUTPUT_HS_INPUT _77[3] = { VS_OUTPUT_HS_INPUT{ in_var_WORLDPOS[0], in_var_NORMAL[0], in_var_TEXCOORD0[0], in_var_LIGHTVECTORTS[0] }, VS_OUTPUT_HS_INPUT{ in_var_WORLDPOS[1], in_var_NORMAL[1], in_var_TEXCOORD0[1], in_var_LIGHTVECTORTS[1] }, VS_OUTPUT_HS_INPUT{ in_var_WORLDPOS[2], in_var_NORMAL[2], in_var_TEXCOORD0[2], in_var_LIGHTVECTORTS[2] } };
    VS_OUTPUT_HS_INPUT param_var_inputPatch[3];
    spvArrayCopyFromStack1(param_var_inputPatch, _77);
    out_var_WORLDPOS[gl_InvocationID] = param_var_inputPatch[gl_InvocationID].worldPos;
    out_var_NORMAL[gl_InvocationID] = param_var_inputPatch[gl_InvocationID].normal;
    out_var_TEXCOORD0[gl_InvocationID] = param_var_inputPatch[gl_InvocationID].texCoord;
    out_var_LIGHTVECTORTS[gl_InvocationID] = param_var_inputPatch[gl_InvocationID].lightTS;
    if (gl_InvocationID == 0u)
    {
        gl_TessLevelOuter[0u] = cbMain.tessellationFactor.x;
        gl_TessLevelOuter[1u] = cbMain.tessellationFactor.y;
        gl_TessLevelOuter[2u] = cbMain.tessellationFactor.z;
        gl_TessLevelInner[0u] = cbMain.tessellationFactor.w;
    }
    out.out_var_WORLDPOS_0 = out_var_WORLDPOS[0];
    out.out_var_WORLDPOS_1 = out_var_WORLDPOS[1];
    out.out_var_WORLDPOS_2 = out_var_WORLDPOS[2];
    out.out_var_NORMAL_0 = out_var_NORMAL[0];
    out.out_var_NORMAL_1 = out_var_NORMAL[1];
    out.out_var_NORMAL_2 = out_var_NORMAL[2];
    out.out_var_TEXCOORD0_0 = out_var_TEXCOORD0[0];
    out.out_var_TEXCOORD0_1 = out_var_TEXCOORD0[1];
    out.out_var_TEXCOORD0_2 = out_var_TEXCOORD0[2];
    out.out_var_LIGHTVECTORTS_0 = out_var_LIGHTVECTORTS[0];
    out.out_var_LIGHTVECTORTS_1 = out_var_LIGHTVECTORTS[1];
    out.out_var_LIGHTVECTORTS_2 = out_var_LIGHTVECTORTS[2];
    return out;
}

